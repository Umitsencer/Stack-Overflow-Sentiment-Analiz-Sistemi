import requests
import pandas as pd
import re
import matplotlib.pyplot as plt

# ğŸ“Œ Stack Overflow API'den veri Ã§ekme
def stackoverflow_veri_cek(tag, adet=1500):
    BASE_URL = "https://api.stackexchange.com/2.3/questions"
    params = {
        "order": "desc",
        "sort": "creation",
        "tagged": tag,
        "site": "stackoverflow",
        "pagesize": 100
    }

    sorular = []
    while len(sorular) < adet:
        response = requests.get(BASE_URL, params=params)
        if response.status_code != 200:
            print("API isteÄŸi baÅŸarÄ±sÄ±z oldu!")
            break
        data = response.json()
        items = data.get("items", [])
        sorular.extend(items)
        if not data.get("has_more", False):
            break
        params["page"] = params.get("page", 1) + 1

    return pd.DataFrame([{"title": s["title"]} for s in sorular[:adet]])

# ğŸ“Œ GeniÅŸletilmiÅŸ Sentiment Kelime Listeleri
pozitif_kelimeler = [
    "great", "good", "excellent", "nice", "awesome", "love", "best", "fast",
    "successful", "helpful", "amazing", "perfect", "clear", "smooth", "efficient",
    "brilliant", "easy", "useful", "correct", "impressive", "reliable", "fun",
    "cool", "fantastic", "wonderful", "positive", "powerful", "flexible", "stable",
    "seamless", "intuitive", "smart", "well", "super", "amazing", "greatest",
    "improvement", "strong", "like", "appreciate", "genius", "safe", "trustworthy",
    "speedy", "robust", "simplified", "user-friendly", "bright", "pleased", "faster",
    "satisfying", "hassle-free", "bug-free", "glad", "love it", "enjoyable", "lightweight"
]

negatif_kelimeler = [
    "bad", "worst", "error", "fail", "problem", "issue", "bug", "slow", "complicated",
    "difficult", "confusing", "frustrating", "annoying", "broken", "crash", "unstable",
    "waste", "hard", "incorrect", "unresponsive", "poor", "conflict", "glitch", "terrible",
    "horrible", "disappointed", "messy", "outdated", "lag", "inconsistent", "missing",
    "awful", "failure", "not working", "disaster", "trash", "useless", "weak", "downgrade",
    "unreliable", "nightmare", "dumb", "slowdown", "pathetic", "crappy", "trouble",
    "clunky", "buggy", "overcomplicated", "tedious", "painful", "nonsense", "nonfunctional"
]

# ğŸ“Œ Kelime GruplarÄ±nÄ± Eklemek iÃ§in Yeni Liste
pozitif_kelime_gruplari = [
    "don't like", "not good", "not working", "could be better", "doesn't help"
]

negatif_kelime_gruplari = [
    "not good", "not working", "doesn't work", "problem with", "not helpful"
]

# ğŸ“Œ Sentiment hesaplama fonksiyonu
def sentiment_hesapla(title):
    title = title.lower()  # KÃ¼Ã§Ã¼k harfe Ã§evir
    title = re.sub(r'[^\w\s]', '', title)  # Noktalama iÅŸaretlerini temizle

    # Basit kelime sayÄ±mÄ±
    pozitif_sayac = sum(title.count(kelime) for kelime in pozitif_kelimeler)
    negatif_sayac = sum(title.count(kelime) for kelime in negatif_kelimeler)

    # Kelime grubu kontrolÃ¼
    for grup in pozitif_kelime_gruplari:
        if grup in title:
            pozitif_sayac += 1

    for grup in negatif_kelime_gruplari:
        if grup in title:
            negatif_sayac += 1

    # EÄŸer pozitif veya negatif varsa ona gÃ¶re sÄ±nÄ±flandÄ±r
    if pozitif_sayac > negatif_sayac:
        return "Pozitif"
    elif negatif_sayac > pozitif_sayac:
        return "Negatif"
    else:
        return "NÃ¶tr"  # EÄŸer hiÃ§biri deÄŸilse nÃ¶tr olarak kabul edilir

# ğŸ“Œ Stack Overflow'dan veri Ã§ekme
tag = "python"
print(f"'{tag}' etiketi ile Stack Overflow'dan 1500 soru Ã§ekiliyor...")
df_sorular = stackoverflow_veri_cek(tag)

# ğŸ“Œ Ä°lk 20 sonucu yazdÄ±rma
print("\nÄ°lk 20 soru baÅŸlÄ±ÄŸÄ±:")
print(df_sorular["title"].head(20))

# ğŸ“Œ Sentiment analizi uygulama
df_sorular["sentiment"] = df_sorular["title"].apply(sentiment_hesapla)

# ğŸ“Œ Analiz sonuÃ§larÄ±nÄ± gÃ¶rselleÅŸtirme
plt.figure(figsize=(12, 5))

# ğŸ“Š Bar GrafiÄŸi
plt.subplot(1, 2, 1)
df_sorular["sentiment"].value_counts().plot(kind="bar", color=["green", "red", "gray"])
plt.xlabel("Sentiment TÃ¼rÃ¼")
plt.ylabel("SayÄ±")
plt.title(f"'{tag}' Etiketi iÃ§in Sentiment Analizi (Bar GrafiÄŸi)")
plt.xticks(rotation=0)

# ğŸ¥§ Pasta GrafiÄŸi
plt.subplot(1, 2, 2)
df_sorular["sentiment"].value_counts().plot(kind="pie", autopct="%1.1f%%", colors=["green", "red", "gray"])
plt.ylabel("")  # Y ekseni baÅŸlÄ±ÄŸÄ±nÄ± kaldÄ±r

plt.suptitle(f"'{tag}' Etiketi iÃ§in Sentiment Analizi (Bar & Pasta GrafiÄŸi)")
plt.show()

# ğŸ“Œ SonuÃ§larÄ± ekrana yazdÄ±r
print("\nSentiment analizi sonuÃ§larÄ± (Ä°lk 20 soru):")
print(df_sorular[["title", "sentiment"]].head(20))  # Ä°lk 20 sonucu gÃ¶r
